package main;

direction SwitchPositionDevice{
	declare event GPSEvent(Navigation n, int s)
	: after call(void Navigation.onStatusChanged(s))
	&& target(n)
	//&& args(s) && if(s == LocationProvider.AVAILABLE)
	: sendTo(n);
	
	declare event WifiEvent(Navigation n, int s)
	: before call(void Navigation.onStatusChanged(s))
	&& target(n) 
	//&& args(s) && if(s==LocationProvider.OUT_OF_SERVICE)
	: sendTo(n);
	
	declare event Boarding()
	: after call(void *.cabinModeEntered());
	
	declare event Arriving()
	: after call(void *.cabinModeExit());
	
	transition GPSEvent():
		WifiNavi switchTo GPSNavi |
		not onBoard activate GPSNavi |
		* switchTo GPSNavi;
	transition WifiEvent():
		GPSNavi switchTo WifiNavi |
		not onBoard activate WifiNavi;
	transition Boarding():
		* switchTo OnBoard;
	transition Arriving():
		OnBoard switchTo . ;
		
}


class Navigation extends MapActivity implements Runnable, LocationListener{
	MapView mapView;
	MyLocationOverlay overlay;
	WifiManager wifiManager;
	BuildingGuide buildingGuide;
	
	void onStatusChanged(){
		
	}
	
	void run(){
		
	}
	
	void onCreate(Bundle status){
		overlay.runOnFirstFix(this);
		//...
	}
	
	layer GPSNavi{
		activate {
			overlay.onProviderEnabled("gps");
		}
		deactivate{
			overlay.onProviderDisabled("gps");
		}
		after void run(){
			Location loc = overlay.getMyLocation();
			mapView.getController().animateTo(loc);
		}
	}
	
	layer WifiNavi{
		activate{
			overlay.onProviderEnabled("Network");
			wifiManager.setWifiEnable(true);
		}
		deactivate{
			overlay.onProviderDisabled("Network");
			wifiManager.setWifiEnable(false);
		}
		after void run(){
			Location loc = overlay.getMyLocation();
			buildingGuide.updateFloorPlan(loc);
		}
	}
	
}