/** 
* Use this module to detect semantic constraint and namebinding violations, 
* i.e. report preservation errors for name collisions and newly introduced/solved constraint violations.
*/
module lib-refactoring/behavior-preservation.generated

imports
  lib/editor-common.generated
  lib/analysis-library.generated
  lib-refactoring/namebinding-preservation.generated
  lib-refactoring/correctness-preservation.generated

strategies

  /**
   * Returns behavior preservation errors and warnings by analyzing the ast-changes.
   * The analysis covers 1) name collision errors and 2) semantic-constraint errors and warnings
   * 
   * The list of AST changes must consist of tuples (term-before, term-after) whereby
   * 1) term-before and term-after are the terms before, respectively after the refactoring transformation. 
   * 2) both terms can be semantically analyzed by the "analyze-top" strategy
   * 3) the term-after contains name annotations that express the EXPECTED binding structure
   *    (typically obtained by preserving annos during transformation and setting annos for new inserted definitions) 
   *
   * Remark: performance can be improved in case the endangered names are known
   * @see get-semantic-violations(constraint-error, constraint-warning, is-endangered-name)
   *
   * @type List(Tuple(ast-before, ast-after)) -> Tuple(List(errors), List(warnings))
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   */
  get-semantic-violations(constraint-error, constraint-warning) =
    get-semantic-violations(analyze-ast, constraint-error, constraint-warning, id)

  /**
   * @see get-semantic-violations(constraint-error, constraint-warning)
   *
   * @type List(Tuple(ast-before, ast-after)) -> Tuple(List(errors), List(warnings))
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param is-endangered-name  String -> String
   */
  get-semantic-violations(constraint-error, constraint-warning, is-endangered-name) =
    get-semantic-violations(analyze-ast, constraint-error, constraint-warning, is-endangered-name)

  /**
   * @see get-semantic-violations(constraint-error, constraint-warning)
   *
   * @type List(Tuple(ast-before, ast-after)) -> Tuple(List(errors), List(warnings))
   * @param analyse             t -> t  sets namebinding annotation and prepares for checking semantic constraints
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param is-endangered-name  String -> String
   */
  get-semantic-violations(analyze, constraint-error, constraint-warning, is-endangered-name):
    ast-changes -> 
    <foldr(
      !([],[]), 
      tuple-conc, 
      get-semantic-violations-astchange(
      	analyze, 
      	constraint-error, 
      	constraint-warning, 
      	is-endangered-name
      )
    )> ast-changes

  /**
   * Returns behavior preservation errors and warnings by analyzing the ast-change.
   * The analysis covers 1) name collision errors and 2) semantic-constraint errors and warnings
   * 
   * The AST change must be a tuple (term-before, term-after) whereby
   * 1) term-before and term-after are the terms before, respectively after the refactoring transformation. 
   * 2) both terms can be semantically analyzed by the "analyze-top" strategy
   * 3) the term-after contains name annotations that express the EXPECTED binding structure
   *    (typically obtained by preserving annos during transformation and setting annos for new inserted definitions) 
   *
   * @type  Tuple(ast-before, ast-after) -> Tuple(List(errors), List(warnings))
   * @param analyse             t -> t  sets namebinding annotation and prepares for checking semantic constraints
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param is-endangered-name  String -> String
   */  
  get-semantic-violations-astchange(analyze, constraint-error, constraint-warning, is-endangered-name):
    (ast-before, ast-after) -> (errors, warnings)
    where
      ast-before-reanalyzed := <analyze> ast-before; //TODO: why needed?
      //index-transaction(
        errors-before   := <collect-all(constraint-error, conc)> ast-before-reanalyzed; 
        warnings-before := <collect-all(constraint-warning, conc)> ast-before-reanalyzed; 
      //);
      //ast with name annotations that express the ACTUAL binding structure
      ast-after-reanalyzed := <analyze> ast-after;
      //index-transaction(
        errors-after   := <collect-all(constraint-error, conc)> ast-after-reanalyzed;
        warnings-after := <collect-all(constraint-warning, conc)> ast-after-reanalyzed;
      //);
      namebinding-preservation-errors := <binding-violation-errors(is-endangered-name)> (ast-after, ast-after-reanalyzed); 
      correctness-preservation-errors := <semantic-constraint-preservation-issues> (errors-before, errors-after);
      errors := <union(same-error-term)> (namebinding-preservation-errors, correctness-preservation-errors);
      warnings := <semantic-constraint-preservation-issues> (warnings-before, warnings-after)

  //report only one violation per term  
  same-error-term:
    err-tup@((t1,_), (t2,_)) -> err-tup
    where
      <origin-equal(|t1)> t2 <+
      <origin-equal(|t2)> t1
  
  //based on analysis provided by index
  analyze-ast = 
  	topdown(strip-annos);
    analyze-top(|
      Editor(), 
      <origin-language>, 
      <origin-relative-path>, 
      <project-path>
    ); 
    Fst
